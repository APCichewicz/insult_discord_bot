version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: discord_bot
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  db_service:
    build:
      context: ./db_service
      dockerfile: dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/discord_bot
      REDIS_HOST: redis:6379
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  tts_service:
    build:
      context: ./tts_service
      dockerfile: dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - shared_audio:/shared/audio
    ports:
      - "8081:8081"
    restart: unless-stopped

  claude-querier:
    build:
      context: ./claude-querier
      dockerfile: dockerfile
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  lolwatcher:
    build:
      context: ./lolwatcher
      dockerfile: dockerfile
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      DATABASE_URL: db_service:8000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      RIOT_API_KEY: ${RIOT_API_KEY}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  bot:
    build:
      context: ./bot
      dockerfile: dockerfile
    environment:
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      DATABASE_URL: http://db_service:8000
      RIOT_API_KEY: ${RIOT_API_KEY}
    volumes:
      - shared_audio:/shared/audio
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      db_service:
        condition: service_started
      tts_service:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  shared_audio: